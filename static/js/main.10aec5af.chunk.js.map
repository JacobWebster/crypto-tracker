{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","operation","id","setState","prevState","isDetailsOn","state","cryptos","isLoaded","api2","api3","api4","host","apikey","fetch","btc","ltc","bch","usdt","Promise","all","then","map","r","json","console","log","catch","e","detailsOn","this","className","crypto","key","coin_id","coin_name","value","last_price","displayType","decimalScale","thousandSeparator","prefix","volume_24hr","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UA4GeA,E,YAtGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,UAAY,SAAAC,GACV,EAAKC,SAAU,SAAAC,GAAS,MAAK,CAC3BC,YAAY,eAAIH,GAAOE,EAAUF,KAAQ,EAAKI,MAAMD,YAAYH,QARlE,EAAKI,MAAQ,CACXC,QAAS,GACTC,UAAU,EACVH,aAAa,GANE,E,4NAiBJ,kEACPI,EAAO,kEACPC,EAAO,kEACPC,EAAO,mEACPC,EAAO,iCACPC,EAAS,qD,SAEGC,MAPL,kEAOiB,CAC5B,QAAW,CAAE,kBAAmBF,EAAK,iBAAkBC,K,cADnDE,E,iBAIYD,MAAML,EAAM,CAC5B,QAAW,CAAE,kBAAmBG,EAAK,iBAAkBC,K,eADnDG,E,iBAIYF,MAAMJ,EAAM,CAC5B,QAAW,CAAE,kBAAmBE,EAAK,iBAAkBC,K,eADnDI,E,iBAIaH,MAAMH,EAAM,CAC7B,QAAW,CAAE,kBAAmBC,EAAK,iBAAkBC,K,eADnDK,E,iBAIAC,QAAQC,IAAI,CAACL,EAAIC,EAAIC,EAAIC,IAC5BG,KAAO,SAAAd,GACN,OAAOY,QAAQC,IAAIb,EAAQe,IAAI,SAAAC,GAAC,OAAIA,EAAEC,YACrCH,KAAK,SAAAd,GACJkB,QAAQC,IAAInB,GACZ,EAAKJ,SAAS,CAACI,QAASA,MAE3BoB,MAAM,SAAAC,M,+HAMD,IAAD,OACDC,EAAYC,KAAKxB,MAAMD,YAC7B,OAEE,yBAAK0B,UAAU,OAEb,gCACI,+CAGJ,yBAAKA,UAAU,WACdD,KAAKxB,MAAMC,QAAQe,IAAI,SAACU,EAAQC,GAAT,OAEtB,yBAAKF,UAAU,kBAAkB7B,GAAI8B,EAAOE,QAASD,IAAKA,GACxD,yBAAKF,UAAU,YACb,4BAAKC,EAAOG,UAAZ,MAAyB,kCAAQH,EAAOE,QAAf,MAEzB,4BAAI,kBAAC,IAAD,CAAcE,MAAOJ,EAAOK,WAAYC,YAAa,OAAQC,aAAc,EAAGC,mBAAmB,EAAMC,OAAQ,OAEhHZ,EAAUI,GAET,yBAAKF,UAAU,WAKb,2BAAG,mDAAH,IAAqCC,EAAOU,aAC5C,2BAAG,yCAAH,IAA0B,kBAAC,IAAD,CAAcN,MAAQ,EAAGJ,EAAOK,WAAa,IAAMC,YAAa,OAAQC,aAAc,IAAhH,KACA,2BAAG,yCAAH,IAA0B,kBAAC,IAAD,CAAcH,MAAQ,EAAGJ,EAAOK,WAAa,IAAMC,YAAa,OAAQC,aAAc,IAAhH,KACA,2BAAG,0CAAH,IAA2B,kBAAC,IAAD,CAAcH,MAAQ,EAAGJ,EAAOK,WAAa,IAAOC,YAAa,OAAQC,aAAc,IAAlH,OAEF,KAGJ,4BAAQI,QAAS,kBAAM,EAAK1C,UAAUgC,IAAMF,UAAU,UAClDF,EAAUI,GAAO,eAAiB,eADtC,e,GAzFIW,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC,iB","file":"static/js/main.10aec5af.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./App.css\";\nimport NumberFormat from 'react-number-format';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cryptos: [],\n      isLoaded: true,\n      isDetailsOn: false,\n    };\n  }\n  operation = id => {\n    this.setState( prevState => ({\n      isDetailsOn: { [id] : !prevState[id] && !this.state.isDetailsOn[id]}\n    }));\n  }\n\n\n  async componentDidMount () {\n    const api1 = \"https://bravenewcoin-v1.p.rapidapi.com/ticker?show=usd&coin=btc\"\n    const api2 = \"https://bravenewcoin-v1.p.rapidapi.com/ticker?show=usd&coin=ltc\"\n    const api3 = \"https://bravenewcoin-v1.p.rapidapi.com/ticker?show=usd&coin=bch\"\n    const api4 = \"https://bravenewcoin-v1.p.rapidapi.com/ticker?show=usd&coin=usdt\"\n    const host = \"bravenewcoin-v1.p.rapidapi.com\"\n    const apikey = \"63d0d8c04cmsh3f3f85efd15fb9dp1385a7jsnbb4c77f159d9\"\n\n    const btc = await fetch(api1, {\n      \"headers\": { \"x-rapidapi-host\": host,\"x-rapidapi-key\": apikey }\n    });\n\n    const ltc = await fetch(api2, {\n      \"headers\": { \"x-rapidapi-host\": host,\"x-rapidapi-key\": apikey }\n    });\n    \n    const bch = await fetch(api3, {\n      \"headers\": { \"x-rapidapi-host\": host,\"x-rapidapi-key\": apikey }\n    });\n\n    const usdt = await fetch(api4, {\n      \"headers\": { \"x-rapidapi-host\": host,\"x-rapidapi-key\": apikey }\n    });\n  \n    await Promise.all([btc,ltc,bch,usdt])\n      .then ( cryptos => {\n        return Promise.all(cryptos.map(r => r.json()));\n      }).then(cryptos =>{\n          console.log(cryptos);\n          this.setState({cryptos: cryptos});\n      })\n      .catch(e => {\n\n      });  \n    \n  }\n\n  render() {\n    const detailsOn = this.state.isDetailsOn;\n    return (\n\n      <div className=\"App\">\n       \n        <header>\n            <h1>Crypto Tracker</h1>\n        </header>\n      \n        <div className=\"contain\">\n        {this.state.cryptos.map((crypto, key) => (\n         \n          <div className=\"crypt-container\" id={crypto.coin_id} key={key}>\n            <div className=\"maindata\">\n              <h2>{crypto.coin_name} | <span> {crypto.coin_id} </span></h2>\n\n              <h2><NumberFormat value={crypto.last_price} displayType={'text'} decimalScale={2} thousandSeparator={true} prefix={'$'}/></h2> \n            \n                {detailsOn[key] ? \n            \n                  <div className=\"details\">\n                    {/* Repeated data \n                    <h3>{crypto.coin_name} | <span> {crypto.coin_id} </span></h3>\n                    <p><strong>Price:</strong> <NumberFormat value={crypto.last_price} displayType={'text'} decimalScale={2} thousandSeparator={true} prefix={'$'}/></p> \n                     */}\n                    <p><strong>24-Hour Volume:</strong> {crypto.volume_24hr}</p>\n                    <p><strong>$100:</strong> <NumberFormat value={ 1 /crypto.last_price * 100 } displayType={'text'} decimalScale={4} /> </p> \n                    <p><strong>$250:</strong> <NumberFormat value={ 1 /crypto.last_price * 250 } displayType={'text'} decimalScale={4} /> </p>  \n                    <p><strong>$5000:</strong> <NumberFormat value={ 1 /crypto.last_price * 5000 } displayType={'text'} decimalScale={4} />  </p> \n                  </div>\n                : null\n                }\n     \n              <button onClick={() => this.operation(key)} className=\"button\">\n                { detailsOn[key] ? 'Hide Details' : 'Show Details'} </button>\n\n            </div>\n          </div>\n        ))}\n       \n       \n\n        </div>\n      </div>\n      \n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}